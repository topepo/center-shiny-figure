# Introduction

orignal add but with `page_fillable()`: 

::: {#fig-basis-expansions}

::: {.figure-content}

```{shinylive-r}
#| label: fig-basis-expansions
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true

library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(splines2)
library(bslib)
library(viridis)
library(aspline)

data(fossil)

ui <- page_fillable(
  theme = bs_theme(bg = "#fcfefe", fg = "#595959"),
  padding = "1rem",
  mainPanel(
    tabsetPanel(
      id = "tabset",
      tabPanel(
        "(a) Global polynomials.",
        fluidRow(
          column(width = 3),
          column(
            width = 6,
            align = "center",
            sliderInput(
              "global_deg",
              label = "Polynomial Degree",
              min = 1L,
              max = 20L,
              step = 1L,
              value = 8L
            )
          )
        ),
        as_fill_carrier(plotOutput('global'))
      ),
      tabPanel(
        "(b) Piecewise polynimials.",
        label = "Polynomial Degree",
        fluidRow(
          column(
            width = 6,
            align = "center",
            sliderInput(
              "piecewise_deg",
              label = "Polynomial Degree",
              min = 0L,
              max = 6L,
              step = 1L,
              value = 4L
            )
          ),
          column(
            width = 6,
            align = "center",
            sliderInput(
              "cuts",
              label = "Cutpoints",
              min = 93L,
              max = 122L,
              step = 1,
              value = c(101, 118)
            )
          )
        ),
        as_fill_carrier(plotOutput('pieces'))
      ),
      tabPanel(
        "(c) Natural cubic splines.",
        fluidRow(
          column(width = 3),
          column(
            width = 6,
            align = "center",
            sliderInput(
              "spline_df",
              label = "# Spline Terms",
              min = 3L,
              max = 20L,
              step = 1L,
              value = 8L
            )
          )
        ),
        as_fill_carrier(plotOutput('spline'))
      )
    )
  )
)

server <- function(input, output, session) {

  light_bg <- "#fcfefe" # from aml4td.scss
  grid_theme <- bs_theme(
    bg = "#fcfefe", fg = "#595959"
  )

  # ------------------------------------------------------------------------------

  theme_light_bl<- function(...) {

    ret <- ggplot2::theme_bw(...)

    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)
    ret$panel.background  <- col_rect
    ret$plot.background   <- col_rect
    ret$legend.background <- col_rect
    ret$legend.key        <- col_rect

    ret$legend.position <- "top"

    ret
  }

  # ------------------------------------------------------------------------------

  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)
  rng <- extendrange(fossil$age, f = .025)
  grid <- seq(rng[1], rng[2], length.out = 1000)
  grid_df <- tibble(x = grid)
  alphas <- 1 / 4
  line_wd <- 1.0
  
  base_p <-
    spline_example %>%
    ggplot(aes(x = x, y = y)) +
    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +
    labs(x = "Age", y = "Isotope Ratio") +
    theme_light_bl()

  output$global <- renderPlot({
    
    poly_fit <- lm(y ~ poly(x, input$global_deg), data = spline_example)
    poly_pred <- 
      predict(poly_fit, grid_df, interval = "conf") %>% 
      bind_cols(grid_df)
    
    global_p <- base_p

    if (input$global_deg > 0) {
      global_p <-
        global_p +
        geom_ribbon(
          data = poly_pred,
          aes(y = NULL, ymin = lwr, ymax = upr),
          alpha = 1 / 15) +
        geom_line(
          data = poly_pred,
          aes(y = fit),
          col = "#377EB8",
          linewidth = line_wd)
    }
    print(global_p)

  })

  output$pieces <- renderPlot({
    maybe_lm <- function(x) {
      try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)
    }
    cuts <- c(0, sort(input$cuts), 60)
    piece_cols <- c("#1B9E77", "#D95F02", "#7570B3")
    piece_p <- base_p

    if (input$piecewise_deg > 0) {
      data_splt <-
        spline_example %>%
        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE)) %>%
        tidyr::nest(.by = x_cut) %>%
        mutate(
          fit = lapply(data, maybe_lm)
        )
      grid_splt <-
        dplyr::tibble(x = grid) %>%
        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE))  %>%
        tidyr::nest(.by = x_cut)

      for (i in 1:3) {
        sub_pred <- grid_splt$data[[i]]
        if (!inherits(data_splt$fit[[i]], "try-error")) {
          sub_pred <-
            sub_pred %>%
            dplyr::bind_cols(predict(data_splt$fit[[i]], sub_pred, interval = "conf"))

          piece_p <-
            piece_p +
            geom_ribbon(
              data = sub_pred,
              aes(y = NULL, ymin = lwr, ymax = upr),
              alpha = 1 / 15
            ) +
            geom_line(
              data = sub_pred,
              aes(y = fit),
              col = piece_cols[i],
              linewidth = line_wd
            )
        }
      }
    }

    print(piece_p)

  })

  output$spline <- renderPlot({

    spline_fit <- lm(y ~ naturalSpline(x, df = input$spline_df), data = spline_example)
    spline_pred <- 
      predict(spline_fit, grid_df, interval = "conf") %>% 
      bind_cols(grid_df)
    
    spline_p <- base_p +
        geom_ribbon(
          data = spline_pred,
          aes(y = NULL, ymin = lwr, ymax = upr),
          alpha = 1 / 15) +
        geom_line(
          data = spline_pred,
          aes(y = fit),
          col = "#E6AB02",
          linewidth = line_wd)

    print(spline_p)

  })

}

app <- shinyApp(ui = ui, server = server)
```

:::

Several approaches to modeling data from REF The black dashed line is the true function and the shaded regions are 95% confidence intervals around the mean. 

:::

Now trying out using cards


::: {#fig-basis-expansions-bslib}

::: {.figure-content}

```{shinylive-r}
#| label: fig-basis-expansions-bslib
#| viewerHeight: 600
#| viewerWidth: "100%"
#| standalone: true

library(shiny)
library(dplyr)
library(tidyr)
library(ggplot2)
library(splines2)
library(bslib)
library(viridis)
library(aspline)

data(fossil)

ui <- page_fillable(
  theme = bs_theme(bg = "#fcfefe", fg = "#595959"),
  padding = "1rem",
  navset_tab(
    nav_panel(
      title = "(a) Global polynomials", 
      layout_columns(
        fill = FALSE,
        col_widths = breakpoints(sm = c(-3, 6, -3)),
        sliderInput(
          "global_deg",
          label = "Polynomial Degree",
          min = 1L, max = 20L, step = 1L, value = 8L,
          ticks = TRUE
        ) # sliderInput
      ), # layout_columns
      as_fill_carrier(plotOutput('global'))
    ), # global poly panel
    
    nav_panel(
      title = "(b) Piecewise polynimials.",
      layout_columns(
        fill = FALSE,
        col_widths = breakpoints(sm = c(-1, 5, 5, -1)),
        sliderInput(
          "piecewise_deg",
          label = "Polynomial Degree",
          min = 0L, max = 6L, step = 1L, value = 4L
        ), # sliderInput
        sliderInput(
          "cuts",
          label = "Cutpoints",
          min = 93L, max = 122L, step = 1, value = c(101, 118)
        ) # sliderInput
      ), # layout_columns
      as_fill_carrier(plotOutput('pieces'))
    ), # piecewise poly panel
    
    nav_panel(
      title = "(c) Natural cubic splines.", 
      layout_columns(
        fill = FALSE,
        col_widths = breakpoints(sm = c(-3, 6, -3)),
        sliderInput(
          "spline_df",
          label = "# Spline Terms",
          min = 3L, max = 20L, step = 1L, value = 8L
        ), # sliderInput
      ), # layout_columns
      layout_columns(
        fill = FALSE,
        col_widths = breakpoints(sm = c(-2, 8, -2)),
        as_fill_carrier(plotOutput('spline'))
      )
    ), # spline panel
  ) # navset_tab
)

server <- function(input, output, session) {

  light_bg <- "#fcfefe" # from aml4td.scss
  grid_theme <- bs_theme(
    bg = "#fcfefe", fg = "#595959"
  )

  # ------------------------------------------------------------------------------

  theme_light_bl<- function(...) {

    ret <- ggplot2::theme_bw(...)

    col_rect <- ggplot2::element_rect(fill = light_bg, colour = light_bg)
    ret$panel.background  <- col_rect
    ret$plot.background   <- col_rect
    ret$legend.background <- col_rect
    ret$legend.key        <- col_rect

    ret$legend.position <- "top"

    ret
  }

  # ------------------------------------------------------------------------------

  spline_example <- tibble(x = fossil$age, y = fossil$strontium.ratio)
  rng <- extendrange(fossil$age, f = .025)
  grid <- seq(rng[1], rng[2], length.out = 1000)
  grid_df <- tibble(x = grid)
  alphas <- 1 / 4
  line_wd <- 1.0
  
  base_p <-
    spline_example %>%
    ggplot(aes(x = x, y = y)) +
    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +
    labs(x = "Age", y = "Isotope Ratio") +
    theme_light_bl()

  output$global <- renderPlot({
    
    poly_fit <- lm(y ~ poly(x, input$global_deg), data = spline_example)
    poly_pred <- 
      predict(poly_fit, grid_df, interval = "conf") %>% 
      bind_cols(grid_df)
    
    global_p <- base_p

    if (input$global_deg > 0) {
      global_p <-
        global_p +
        geom_ribbon(
          data = poly_pred,
          aes(y = NULL, ymin = lwr, ymax = upr),
          alpha = 1 / 15) +
        geom_line(
          data = poly_pred,
          aes(y = fit),
          col = "#377EB8",
          linewidth = line_wd)
    }
    print(global_p)

  })

  output$pieces <- renderPlot({
    maybe_lm <- function(x) {
      try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)
    }
    cuts <- c(0, sort(input$cuts), 60)
    piece_cols <- c("#1B9E77", "#D95F02", "#7570B3")
    piece_p <- base_p

    if (input$piecewise_deg > 0) {
      data_splt <-
        spline_example %>%
        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE)) %>%
        tidyr::nest(.by = x_cut) %>%
        mutate(
          fit = lapply(data, maybe_lm)
        )
      grid_splt <-
        dplyr::tibble(x = grid) %>%
        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE))  %>%
        tidyr::nest(.by = x_cut)

      for (i in 1:3) {
        sub_pred <- grid_splt$data[[i]]
        if (!inherits(data_splt$fit[[i]], "try-error")) {
          sub_pred <-
            sub_pred %>%
            dplyr::bind_cols(predict(data_splt$fit[[i]], sub_pred, interval = "conf"))

          piece_p <-
            piece_p +
            geom_ribbon(
              data = sub_pred,
              aes(y = NULL, ymin = lwr, ymax = upr),
              alpha = 1 / 15
            ) +
            geom_line(
              data = sub_pred,
              aes(y = fit),
              col = piece_cols[i],
              linewidth = line_wd
            )
        }
      }
    }

    print(piece_p)

  })

  output$spline <- renderPlot({

    spline_fit <- lm(y ~ naturalSpline(x, df = input$spline_df), data = spline_example)
    spline_pred <- 
      predict(spline_fit, grid_df, interval = "conf") %>% 
      bind_cols(grid_df)
    
    spline_p <- base_p +
        geom_ribbon(
          data = spline_pred,
          aes(y = NULL, ymin = lwr, ymax = upr),
          alpha = 1 / 15) +
        geom_line(
          data = spline_pred,
          aes(y = fit),
          col = "#E6AB02",
          linewidth = line_wd)

    print(spline_p)

  })

}

app <- shinyApp(ui = ui, server = server)
```

:::

Reworked

:::

