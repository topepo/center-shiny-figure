[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "center-shiny-figure",
    "section": "",
    "text": "Preface\nTo understand this better, Figure Prediction contours for a linear regression model. shows a contour plot of a predicted linear regression model with various combinations of the model slope parameters. The two predictors are centered at zero with values ranging within \\(x_j \\pm 4.0\\)). The default setting shows a moderate synergistic interaction effect since all of the \\(\\beta_j = 1.0\\)). In the plot, darker values indicate smaller predicted values.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "orignal add but with page_fillable():\n\n\n\n\n#| label: fig-basis-expansions\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(splines2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(aspline)\n\ndata(fossil)\n\nui &lt;- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  mainPanel(\n    tabsetPanel(\n      id = \"tabset\",\n      tabPanel(\n        \"(a) Global polynomials.\",\n        fluidRow(\n          column(width = 3),\n          column(\n            width = 6,\n            align = \"center\",\n            sliderInput(\n              \"global_deg\",\n              label = \"Polynomial Degree\",\n              min = 1L,\n              max = 20L,\n              step = 1L,\n              value = 8L\n            )\n          )\n        ),\n        as_fill_carrier(plotOutput('global'))\n      ),\n      tabPanel(\n        \"(b) Piecewise polynimials.\",\n        label = \"Polynomial Degree\",\n        fluidRow(\n          column(\n            width = 6,\n            align = \"center\",\n            sliderInput(\n              \"piecewise_deg\",\n              label = \"Polynomial Degree\",\n              min = 0L,\n              max = 6L,\n              step = 1L,\n              value = 4L\n            )\n          ),\n          column(\n            width = 6,\n            align = \"center\",\n            sliderInput(\n              \"cuts\",\n              label = \"Cutpoints\",\n              min = 93L,\n              max = 122L,\n              step = 1,\n              value = c(101, 118)\n            )\n          )\n        ),\n        as_fill_carrier(plotOutput('pieces'))\n      ),\n      tabPanel(\n        \"(c) Natural cubic splines.\",\n        fluidRow(\n          column(width = 3),\n          column(\n            width = 6,\n            align = \"center\",\n            sliderInput(\n              \"spline_df\",\n              label = \"# Spline Terms\",\n              min = 3L,\n              max = 20L,\n              step = 1L,\n              value = 8L\n            )\n          )\n        ),\n        as_fill_carrier(plotOutput('spline'))\n      )\n    )\n  )\n)\n\nserver &lt;- function(input, output, session) {\n\n  light_bg &lt;- \"#fcfefe\" # from aml4td.scss\n  grid_theme &lt;- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n\n  # ------------------------------------------------------------------------------\n\n  theme_light_bl&lt;- function(...) {\n\n    ret &lt;- ggplot2::theme_bw(...)\n\n    col_rect &lt;- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  &lt;- col_rect\n    ret$plot.background   &lt;- col_rect\n    ret$legend.background &lt;- col_rect\n    ret$legend.key        &lt;- col_rect\n\n    ret$legend.position &lt;- \"top\"\n\n    ret\n  }\n\n  # ------------------------------------------------------------------------------\n\n  spline_example &lt;- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng &lt;- extendrange(fossil$age, f = .025)\n  grid &lt;- seq(rng[1], rng[2], length.out = 1000)\n  grid_df &lt;- tibble(x = grid)\n  alphas &lt;- 1 / 4\n  line_wd &lt;- 1.0\n  \n  base_p &lt;-\n    spline_example %&gt;%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    theme_light_bl()\n\n  output$global &lt;- renderPlot({\n    \n    poly_fit &lt;- lm(y ~ poly(x, input$global_deg), data = spline_example)\n    poly_pred &lt;- \n      predict(poly_fit, grid_df, interval = \"conf\") %&gt;% \n      bind_cols(grid_df)\n    \n    global_p &lt;- base_p\n\n    if (input$global_deg &gt; 0) {\n      global_p &lt;-\n        global_p +\n        geom_ribbon(\n          data = poly_pred,\n          aes(y = NULL, ymin = lwr, ymax = upr),\n          alpha = 1 / 15) +\n        geom_line(\n          data = poly_pred,\n          aes(y = fit),\n          col = \"#377EB8\",\n          linewidth = line_wd)\n    }\n    print(global_p)\n\n  })\n\n  output$pieces &lt;- renderPlot({\n    maybe_lm &lt;- function(x) {\n      try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)\n    }\n    cuts &lt;- c(0, sort(input$cuts), 60)\n    piece_cols &lt;- c(\"#1B9E77\", \"#D95F02\", \"#7570B3\")\n    piece_p &lt;- base_p\n\n    if (input$piecewise_deg &gt; 0) {\n      data_splt &lt;-\n        spline_example %&gt;%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE)) %&gt;%\n        tidyr::nest(.by = x_cut) %&gt;%\n        mutate(\n          fit = lapply(data, maybe_lm)\n        )\n      grid_splt &lt;-\n        dplyr::tibble(x = grid) %&gt;%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE))  %&gt;%\n        tidyr::nest(.by = x_cut)\n\n      for (i in 1:3) {\n        sub_pred &lt;- grid_splt$data[[i]]\n        if (!inherits(data_splt$fit[[i]], \"try-error\")) {\n          sub_pred &lt;-\n            sub_pred %&gt;%\n            dplyr::bind_cols(predict(data_splt$fit[[i]], sub_pred, interval = \"conf\"))\n\n          piece_p &lt;-\n            piece_p +\n            geom_ribbon(\n              data = sub_pred,\n              aes(y = NULL, ymin = lwr, ymax = upr),\n              alpha = 1 / 15\n            ) +\n            geom_line(\n              data = sub_pred,\n              aes(y = fit),\n              col = piece_cols[i],\n              linewidth = line_wd\n            )\n        }\n      }\n    }\n\n    print(piece_p)\n\n  })\n\n  output$spline &lt;- renderPlot({\n\n    spline_fit &lt;- lm(y ~ naturalSpline(x, df = input$spline_df), data = spline_example)\n    spline_pred &lt;- \n      predict(spline_fit, grid_df, interval = \"conf\") %&gt;% \n      bind_cols(grid_df)\n    \n    spline_p &lt;- base_p +\n        geom_ribbon(\n          data = spline_pred,\n          aes(y = NULL, ymin = lwr, ymax = upr),\n          alpha = 1 / 15) +\n        geom_line(\n          data = spline_pred,\n          aes(y = fit),\n          col = \"#E6AB02\",\n          linewidth = line_wd)\n\n    print(spline_p)\n\n  })\n\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n\nFigure 1.1: Several approaches to modeling data from REF The black dashed line is the true function and the shaded regions are 95% confidence intervals around the mean.\n\n\n\nNow trying out using cards\n\n\n\n\n#| label: fig-basis-expansions-bslib\n#| viewerHeight: 600\n#| viewerWidth: \"100%\"\n#| standalone: true\n\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(splines2)\nlibrary(bslib)\nlibrary(viridis)\nlibrary(aspline)\n\ndata(fossil)\n\nui &lt;- page_fillable(\n  theme = bs_theme(bg = \"#fcfefe\", fg = \"#595959\"),\n  padding = \"1rem\",\n  navset_tab(\n    nav_panel(\n      title = \"(a) Global polynomials\", \n      layout_columns(\n        fill = FALSE,\n        col_widths = breakpoints(sm = c(-3, 6, -3)),\n        sliderInput(\n          \"global_deg\",\n          label = \"Polynomial Degree\",\n          min = 1L, max = 20L, step = 1L, value = 8L,\n          ticks = TRUE\n        ) # sliderInput\n      ), # layout_columns\n      as_fill_carrier(plotOutput('global'))\n    ), # global poly panel\n    \n    nav_panel(\n      title = \"(b) Piecewise polynimials.\",\n      layout_columns(\n        fill = FALSE,\n        col_widths = breakpoints(sm = c(-1, 5, 5, -1)),\n        sliderInput(\n          \"piecewise_deg\",\n          label = \"Polynomial Degree\",\n          min = 0L, max = 6L, step = 1L, value = 4L\n        ), # sliderInput\n        sliderInput(\n          \"cuts\",\n          label = \"Cutpoints\",\n          min = 93L, max = 122L, step = 1, value = c(101, 118)\n        ) # sliderInput\n      ), # layout_columns\n      as_fill_carrier(plotOutput('pieces'))\n    ), # piecewise poly panel\n    \n    nav_panel(\n      title = \"(c) Natural cubic splines.\", \n      layout_columns(\n        fill = FALSE,\n        col_widths = breakpoints(sm = c(-3, 6, -3)),\n        sliderInput(\n          \"spline_df\",\n          label = \"# Spline Terms\",\n          min = 3L, max = 20L, step = 1L, value = 8L\n        ), # sliderInput\n      ), # layout_columns\n      layout_columns(\n        fill = FALSE,\n        col_widths = breakpoints(sm = c(-2, 8, -2)),\n        as_fill_carrier(plotOutput('spline'))\n      )\n    ), # spline panel\n  ) # navset_tab\n)\n\nserver &lt;- function(input, output, session) {\n\n  light_bg &lt;- \"#fcfefe\" # from aml4td.scss\n  grid_theme &lt;- bs_theme(\n    bg = \"#fcfefe\", fg = \"#595959\"\n  )\n\n  # ------------------------------------------------------------------------------\n\n  theme_light_bl&lt;- function(...) {\n\n    ret &lt;- ggplot2::theme_bw(...)\n\n    col_rect &lt;- ggplot2::element_rect(fill = light_bg, colour = light_bg)\n    ret$panel.background  &lt;- col_rect\n    ret$plot.background   &lt;- col_rect\n    ret$legend.background &lt;- col_rect\n    ret$legend.key        &lt;- col_rect\n\n    ret$legend.position &lt;- \"top\"\n\n    ret\n  }\n\n  # ------------------------------------------------------------------------------\n\n  spline_example &lt;- tibble(x = fossil$age, y = fossil$strontium.ratio)\n  rng &lt;- extendrange(fossil$age, f = .025)\n  grid &lt;- seq(rng[1], rng[2], length.out = 1000)\n  grid_df &lt;- tibble(x = grid)\n  alphas &lt;- 1 / 4\n  line_wd &lt;- 1.0\n  \n  base_p &lt;-\n    spline_example %&gt;%\n    ggplot(aes(x = x, y = y)) +\n    geom_point(alpha = 3 / 4, pch = 1, cex = 3) +\n    labs(x = \"Age\", y = \"Isotope Ratio\") +\n    theme_light_bl()\n\n  output$global &lt;- renderPlot({\n    \n    poly_fit &lt;- lm(y ~ poly(x, input$global_deg), data = spline_example)\n    poly_pred &lt;- \n      predict(poly_fit, grid_df, interval = \"conf\") %&gt;% \n      bind_cols(grid_df)\n    \n    global_p &lt;- base_p\n\n    if (input$global_deg &gt; 0) {\n      global_p &lt;-\n        global_p +\n        geom_ribbon(\n          data = poly_pred,\n          aes(y = NULL, ymin = lwr, ymax = upr),\n          alpha = 1 / 15) +\n        geom_line(\n          data = poly_pred,\n          aes(y = fit),\n          col = \"#377EB8\",\n          linewidth = line_wd)\n    }\n    print(global_p)\n\n  })\n\n  output$pieces &lt;- renderPlot({\n    maybe_lm &lt;- function(x) {\n      try(lm(y ~ poly(x, input$piecewise_deg), data = x), silent = TRUE)\n    }\n    cuts &lt;- c(0, sort(input$cuts), 60)\n    piece_cols &lt;- c(\"#1B9E77\", \"#D95F02\", \"#7570B3\")\n    piece_p &lt;- base_p\n\n    if (input$piecewise_deg &gt; 0) {\n      data_splt &lt;-\n        spline_example %&gt;%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE)) %&gt;%\n        tidyr::nest(.by = x_cut) %&gt;%\n        mutate(\n          fit = lapply(data, maybe_lm)\n        )\n      grid_splt &lt;-\n        dplyr::tibble(x = grid) %&gt;%\n        dplyr::mutate(x_cut = cut(x, breaks = cuts, include.lowest = TRUE))  %&gt;%\n        tidyr::nest(.by = x_cut)\n\n      for (i in 1:3) {\n        sub_pred &lt;- grid_splt$data[[i]]\n        if (!inherits(data_splt$fit[[i]], \"try-error\")) {\n          sub_pred &lt;-\n            sub_pred %&gt;%\n            dplyr::bind_cols(predict(data_splt$fit[[i]], sub_pred, interval = \"conf\"))\n\n          piece_p &lt;-\n            piece_p +\n            geom_ribbon(\n              data = sub_pred,\n              aes(y = NULL, ymin = lwr, ymax = upr),\n              alpha = 1 / 15\n            ) +\n            geom_line(\n              data = sub_pred,\n              aes(y = fit),\n              col = piece_cols[i],\n              linewidth = line_wd\n            )\n        }\n      }\n    }\n\n    print(piece_p)\n\n  })\n\n  output$spline &lt;- renderPlot({\n\n    spline_fit &lt;- lm(y ~ naturalSpline(x, df = input$spline_df), data = spline_example)\n    spline_pred &lt;- \n      predict(spline_fit, grid_df, interval = \"conf\") %&gt;% \n      bind_cols(grid_df)\n    \n    spline_p &lt;- base_p +\n        geom_ribbon(\n          data = spline_pred,\n          aes(y = NULL, ymin = lwr, ymax = upr),\n          alpha = 1 / 15) +\n        geom_line(\n          data = spline_pred,\n          aes(y = fit),\n          col = \"#E6AB02\",\n          linewidth = line_wd)\n\n    print(spline_p)\n\n  })\n\n}\n\napp &lt;- shinyApp(ui = ui, server = server)\n\n\n\nFigure 1.2: Reworked",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  },
  {
    "objectID": "index.html#sourcing-the-file",
    "href": "index.html#sourcing-the-file",
    "title": "center-shiny-figure",
    "section": "sourcing the file",
    "text": "sourcing the file\n\n\n\n\n#| label: fig-sourced\n#| viewerHeight: 600\n#| standalone: true\n#| file: shiny-r-source.R\n\n\n\nFigure 2: Trying to source the file",
    "crumbs": [
      "Preface"
    ]
  }
]